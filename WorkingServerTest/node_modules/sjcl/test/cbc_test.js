new sjcl.test.TestCase("CBC mode tests", function (cb) {
	((sjcl.beware && sjcl.beware["CBC mode is dangerous because it doesn't protect message integrity."]) ||
	function(){})();

	if (!sjcl.cipher.aes || !sjcl.mode.cbc) {
		this.unimplemented();
		cb && cb();
		return;
	}

	var i, tv, iv, ct, aes, len, pt;
	browserUtil.cpsIterate(function (j, cbb) {
		for (i=100*j; i<sjcl.test.vector.cbc.length && i<100*(j+1); i++) {
			tv = sjcl.test.vector.cbc[i];
			len = 32 * tv.key.length;
			aes = new sjcl.cipher.aes(sjcl.codec.hex.toBits(tv.key));

			// Convert from strings
			iv = sjcl.codec.hex.toBits(tv.iv);
			pt = sjcl.codec.hex.toBits(tv.pt);
			ct = sjcl.codec.hex.toBits(tv.ct);

			this.require(sjcl.bitArray.equal(sjcl.mode.cbc.encrypt(aes, pt, iv), ct), "aes-"+len+"-cbc-encrypt #"+i);
			try {
				this.require(sjcl.bitArray.equal(sjcl.mode.cbc.decrypt(aes, ct, iv), pt), "aes-"+len+"-cbc-decrypt #"+i);
			} catch (e) {
				this.fail("aes-cbc-decrypt #"+i+" (exn "+e+")");
			}
		}
		cbb();
	}, 0, sjcl.test.vector.cbc.length / 100, true, cb);
});